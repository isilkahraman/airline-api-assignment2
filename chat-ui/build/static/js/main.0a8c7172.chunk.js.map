{"version":3,"sources":["firebase.js","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","styles","getAnalytics","container","padding","fontFamily","height","display","flexDirection","chatBox","flex","border","borderRadius","overflowY","marginBottom","gap","inputArea","input","button","backgroundColor","color","message","maxWidth","whiteSpace","Chat","messages","setMessages","useState","setInput","sendMessage","async","trim","userMessage","sender","text","prev","response","axios","post","botMessage","JSON","stringify","data","result","err","errorMsg","React","createElement","style","map","msg","index","key","_objectSpread","alignSelf","value","onChange","e","target","onKeyDown","placeholder","onClick","App","className","textAlign","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"qPAQA,MAWMA,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,uCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBCmDXC,GD9CYC,YAAaV,GC8ChB,CACbW,UAAW,CACTC,QAAS,GACTC,WAAY,QACZC,OAAQ,QACRC,QAAS,OACTC,cAAe,UAEjBC,QAAS,CACPC,KAAM,EACNN,QAAS,GACTO,OAAQ,iBACRC,aAAc,GACdC,UAAW,OACXC,aAAc,GACdP,QAAS,OACTC,cAAe,SACfO,IAAK,IAEPC,UAAW,CACTT,QAAS,OACTQ,IAAK,IAEPE,MAAO,CACLP,KAAM,EACNN,QAAS,GACTQ,aAAc,EACdD,OAAQ,kBAEVO,OAAQ,CACNd,QAAS,YACTQ,aAAc,EACdO,gBAAiB,UACjBC,MAAO,QACPT,OAAQ,QAEVU,QAAS,CACPjB,QAAS,GACTQ,aAAc,GACdU,SAAU,MACVC,WAAY,cAIDC,MAzGFA,KACX,MAAOC,EAAUC,GAAeC,mBAAS,KAClCV,EAAOW,GAAYD,mBAAS,IAE7BE,EAAcC,UAClB,IAAKb,EAAMc,OAAQ,OAEnB,MAAMC,EAAc,CAAEC,OAAQ,OAAQC,KAAMjB,GAC5CS,EAAaS,GAAS,IAAIA,EAAMH,IAEhC,IACE,MAAMI,QAAiBC,IAAMC,KAAK,iCAAkC,CAClEjB,QAASJ,IAILsB,EAAa,CAAEN,OAAQ,MAAOC,KADnBM,KAAKC,UAAUL,EAASM,KAAKC,QAAUP,EAASM,KAAM,KAAM,IAG7EhB,EAAaS,GAAS,IAAIA,EAAMI,IAChC,MAAOK,GACP,MAAMC,EAAW,CAAEZ,OAAQ,MAAOC,KAAM,UAAYU,EAAIvB,SACxDK,EAAaS,GAAS,IAAIA,EAAMU,IAGlCjB,EAAS,KAOX,OACEkB,IAAAC,cAAA,OAAKC,MAAO/C,EAAOE,WACjB2C,IAAAC,cAAA,OAAKC,MAAO/C,EAAOQ,SAChBgB,EAASwB,IAAI,CAACC,EAAKC,IAClBL,IAAAC,cAAA,OACEK,IAAKD,EACLH,MAAKK,wBAAA,GACApD,EAAOoB,SAAO,IACjBiC,UAA0B,SAAfJ,EAAIjB,OAAoB,WAAa,aAChDd,gBAAgC,SAAf+B,EAAIjB,OAAoB,UAAY,aAGtDiB,EAAIhB,QAIXY,IAAAC,cAAA,OAAKC,MAAO/C,EAAOe,WACjB8B,IAAAC,cAAA,SACEQ,MAAOtC,EACPuC,SAAWC,GAAM7B,EAAS6B,EAAEC,OAAOH,OACnCI,UAxBeF,IACP,UAAVA,EAAEL,KAAiBvB,KAwBjBmB,MAAO/C,EAAOgB,MACd2C,YAAY,sBAEdd,IAAAC,cAAA,UAAQc,QAAShC,EAAamB,MAAO/C,EAAOiB,QAAQ,WChD7C4C,MATf,WACE,OACEhB,IAAAC,cAAA,OAAKgB,UAAU,OACbjB,IAAAC,cAAA,MAAIC,MAAO,CAAEgB,UAAW,WAAY,iBACpClB,IAAAC,cAACvB,EAAI,QCKIyC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjC,IAAAC,cAACD,IAAMkC,WAAU,KACflC,IAAAC,cAACe,EAAG,QAORG,M","file":"static/js/main.0a8c7172.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDZYwQkTqIiOPAgTaGYjNgx_61D5OaBTZg\",\r\n  authDomain: \"ai-airline-agent.firebaseapp.com\",\r\n  projectId: \"ai-airline-agent\",\r\n  storageBucket: \"ai-airline-agent.firebasestorage.app\",\r\n  messagingSenderId: \"39613691574\",\r\n  appId: \"1:39613691574:web:7a5b3f94aac5fa0d4e1817\",\r\n  measurementId: \"G-MYB5CW9R3G\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { db } from './firebase';\r\n\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: 'user', text: input };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/chat', {\r\n        message: input\r\n      });\r\n\r\n      const botReply = JSON.stringify(response.data.result || response.data, null, 2);\r\n      const botMessage = { sender: 'bot', text: botReply };\r\n\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (err) {\r\n      const errorMsg = { sender: 'bot', text: 'Error: ' + err.message };\r\n      setMessages((prev) => [...prev, errorMsg]);\r\n    }\r\n\r\n    setInput('');\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') sendMessage();\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.chatBox}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              ...styles.message,\r\n              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n              backgroundColor: msg.sender === 'user' ? '#DCF8C6' : '#E6E6E6'\r\n            }}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={styles.inputArea}>\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          style={styles.input}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button onClick={sendMessage} style={styles.button}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    padding: 20,\r\n    fontFamily: 'Arial',\r\n    height: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  },\r\n  chatBox: {\r\n    flex: 1,\r\n    padding: 10,\r\n    border: '1px solid #ccc',\r\n    borderRadius: 10,\r\n    overflowY: 'auto',\r\n    marginBottom: 10,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: 10\r\n  },\r\n  inputArea: {\r\n    display: 'flex',\r\n    gap: 10\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    border: '1px solid #ccc'\r\n  },\r\n  button: {\r\n    padding: '10px 20px',\r\n    borderRadius: 5,\r\n    backgroundColor: '#4CAF50',\r\n    color: 'white',\r\n    border: 'none'\r\n  },\r\n  message: {\r\n    padding: 10,\r\n    borderRadius: 10,\r\n    maxWidth: '80%',\r\n    whiteSpace: 'pre-wrap'\r\n  }\r\n};\r\n\r\nexport default Chat;\r\n","import React from 'react';\nimport Chat from './Chat';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2 style={{ textAlign: 'center' }}>AI Agent Chat</h2>\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}